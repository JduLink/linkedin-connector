<!-- BEGIN_INCLUDE(linkedin:getProfileForCurrentUser) -->
String accessToken = ...
String accessTokenSecret = ...
List<ProfileField> profileFields = ...
LinkedInConnector linkedin = new LinkedInConnector();
Person response = linkedin.getProfileForCurrentUser(accessToken, accessTokenSecret, profileFields);
<!-- END_INCLUDE(linkedin:getProfileForCurrentUser) -->


<!-- BEGIN_INCLUDE(linkedin:getProfileById) -->
String accessToken = ...
String accessTokenSecret = ..
String id = ...
List<ProfileField> profileFields = ...
LinkedInConnector linkedin = new LinkedInConnector();
Person response = linkedin.getProfileById(accessToken, accessTokenSecret, id, profileFields);
<!-- END_INCLUDE(linkedin:getProfileById) -->

<!-- BEGIN_INCLUDE(linkedin:getProfileByUrl) -->
String accessToken = ...
String accessTokenSecret = ..
String url = ...
ProfileType profileType = ...
List<ProfileField> profileFields = ...
LinkedInConnector linkedin = new LinkedInConnector();
Person response = linkedin.getProfileByUrl(accessToken, accessTokenSecret, url, profileType, profileFields);
<!-- END_INCLUDE(linkedin:getProfileByUrl) -->

<!-- BEGIN_INCLUDE(linkedin:getNetworkUpdates) -->
String accessToken = ...
String accessTokenSecret = ..
List<NetworkUpdateType> updateTypes = ...
Integer start = ...
Integer count = ...
Date startDate = ...
Date endDate = ...
Boolean showHiddenMembers
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.getNetworkUpdates(accessToken, accessTokenSecret, updateTypes, start, count, startDate, endDate, showHiddenMembers);
<!-- END_INCLUDE(linkedin:getNetworkUpdates) -->

<!-- BEGIN_INCLUDE(linkedin:getUserUpdates) -->
String accessToken = ...
String accessTokenSecret = ...
List<NetworkUpdateType> updateTypes = ...
Integer start = ...
Integer count = ...
Date startDate = ...
Date endDate = ...
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.getUserUpdates(accessToken, accessTokenSecret, updateTypes, start, count, startDate, endDate);
<!-- END_INCLUDE(linkedin:getUserUpdates) -->

<!-- BEGIN_INCLUDE(linkedin:getUserUpdatesById) -->
String accessToken = ...
String accessTokenSecret = ...
String id = ...
List<NetworkUpdateType> updateTypes = ...
Integer start = ...
Integer count = ...
Date startDate = ...
Date endDate = ...
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.getUserUpdatesById(accessToken, accessTokenSecret, id, updateTypes, start, count, startDate, endDate);
<!-- END_INCLUDE(linkedin:getUserUpdatesById) -->

<!-- BEGIN_INCLUDE(linkedin:getNetworkUpdateComments) -->
String accessToken = ...
String accessTokenSecret = ...
String networkUpdateId = ...
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.getNetworkUpdateComments(accessToken, accessTokenSecret, networkUpdateId);
<!-- END_INCLUDE(linkedin:getNetworkUpdateComments) -->

<!-- BEGIN_INCLUDE(linkedin:getNetworkUpdateLikes) -->
String accessToken = ...
String accessTokenSecret = ...
String networkUpdateId = ...
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.getNetworkUpdateLikes(accessToken, accessTokenSecret, networkUpdateId);
<!-- END_INCLUDE(linkedin:getNetworkUpdateLikes) -->

<!-- BEGIN_INCLUDE(linkedin:getConnectionsForCurrentUser) -->
String accessToken = ...
String accessTokenSecret = ...
List<ProfileField> profileFields = ...
Integer start = ...
Integer count = ...
Date modificationDate = ...
ConnectionModificationType modificationType = ...
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.getConnectionsForCurrentUser(accessToken, accessTokenSecret, profileFields, start, count, modificationDate, modificationType);
<!-- END_INCLUDE(linkedin:getConnectionsForCurrentUser) -->

<!-- BEGIN_INCLUDE(linkedin:getConnectionsById) -->
String accessToken = ...
String accessTokenSecret = ...
String id = ...
List<ProfileField> profileFields = ...
Integer start = ...
Integer count = ...
Date modificationDate = ...
ConnectionModificationType modificationType = ...
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.getConnectionsById(accessToken, accessTokenSecret, id, profileFields, start, count, modificationDate, modificationType);
<!-- END_INCLUDE(linkedin:getConnectionsById) -->

<!-- BEGIN_INCLUDE(linkedin:getConnectionsByUrl) -->
String accessToken = ...
String accessTokenSecret = ...
String url = ...
List<ProfileField> profileFields = ...
Integer start = ...
Integer count = ...
Date modificationDate = ...
ConnectionModificationType modificationType = ...
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.getConnectionsByUrl(accessToken, accessTokenSecret, url, profileFields, start, count, modificationDate, modificationType);
<!-- END_INCLUDE(linkedin:getConnectionsByUrl) -->

<!-- BEGIN_INCLUDE(linkedin:searchPeople) -->
String accessToken = ...
String accessTokenSecret = ...
Map<SearchParameter, String> searchParameters  = ...
List<ProfileField> profileFields = ...
Integer start = ...
Integer count = ...
SearchSortOrder sortOrder = ...
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.searchPeople(accessToken, accessTokenSecret, searchParameters, profileFields, start, count, sortOrder);
<!-- END_INCLUDE(linkedin:searchPeople) -->

<!-- BEGIN_INCLUDE(linkedin:searchPeopleWithFacets) -->
String accessToken = ...
String accessTokenSecret = ...
Map<SearchParameter, String> searchParameters  = ...
List<ProfileField> profileFields = ...
Integer start = ...
Integer count = ...
SearchSortOrder sortOrder =
Map<FacetType, String> facets = ...
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.searchPeopleWithFacets(accessToken, accessTokenSecret, searchParameters, profileFields, start, count, sortOrder, facets));
<!-- END_INCLUDE(linkedin:searchPeopleWithFacets) -->

<!-- BEGIN_INCLUDE(linkedin:searchPeopleWithFacetFields) -->
String accessToken = ...
String accessTokenSecret = ...
Map<SearchParameter, String> searchParameters  = ...
List<ProfileField> profileFields = ...
List<FacetField> facetFields = ...
Integer start = ...
Integer count = ...
SearchSortOrder sortOrder =
Map<FacetType, String> facets = ...
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.searchPeopleWithFacetFields(accessToken, accessTokenSecret, searchParameters, profileFields, facetFields, start, count, sortOrder, facets);
<!-- END_INCLUDE(linkedin:searchPeopleWithFacetFields) -->

<!-- BEGIN_INCLUDE(linkedin:postNetworkUpdate) -->
String accessToken = ...
String accessTokenSecret = ...
String updateText = ...
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.postNetworkUpdate(accessToken, accessTokenSecret, updateText);
<!-- END_INCLUDE(linkedin:postNetworkUpdate) -->

<!-- BEGIN_INCLUDE(linkedin:postComment) -->
String accessToken = ...
String accessTokenSecret = ...
String networkUpdateId = ...
String commentText = ...
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.postComment(accessToken, accessTokenSecret, networkUpdateId, commentText);
<!-- END_INCLUDE(linkedin:postComment) -->

<!-- BEGIN_INCLUDE(linkedin:likePost) -->
String accessToken = ...
String accessTokenSecret = ...
String networkUpdateId = ...
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.likePost(accessToken, accessTokenSecret, networkUpdateId);
<!-- END_INCLUDE(linkedin:likePost) -->

<!-- BEGIN_INCLUDE(linkedin:unlikePost) -->
String accessToken = ...
String accessTokenSecret = ...
String networkUpdateId = ...
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.unlikePost(accessToken, accessTokenSecret, networkUpdateId);
<!-- END_INCLUDE(linkedin:unlikePost) -->

<!-- BEGIN_INCLUDE(linkedin:updateCurrentStatus) -->
String accessToken = ...
String accessTokenSecret = ...
String status = ...
Boolean postToTwitter = ...
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.updateCurrentStatus(accessToken, accessTokenSecret, status, postToTwitter);
<!-- END_INCLUDE(linkedin:updateCurrentStatus) -->

<!-- BEGIN_INCLUDE(linkedin:deleteCurrentStatus) -->
String accessToken = ...
String accessTokenSecret = ...
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.op(accessToken, accessTokenSecret);
<!-- END_INCLUDE(linkedin:deleteCurrentStatus) -->

<!-- BEGIN_INCLUDE(linkedin:sendMessage) -->
String accessToken = ...
String accessTokenSecret = ...
List<String> recepientIds = ...
String subject = ...
String message = ...
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.sendMessage(accessToken, accessTokenSecret, recepientIds, subject, message);
<!-- END_INCLUDE(linkedin:sendMessage) -->

<!-- BEGIN_INCLUDE(linkedin:sendInviteByEmail) -->
String accessToken = ...
String accessTokenSecret = ...
String email = ...
String firstName = ...
String lastName = ...
String subject = ...
String message = ...
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.sendInviteByEmail(accessToken, accessTokenSecret, email, firstName, lastName, subject, message);
<!-- END_INCLUDE(linkedin:sendInviteByEmail) -->

<!-- BEGIN_INCLUDE(linkedin:postShare) -->
String accessToken = ...
String accessTokenSecret = ...
String commentText = ...
String title = ...
String url = ...,
String imageUrl = ...
VisibilityType visibility = ...
Boolean postToTwitter = ...
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.postShare(accessToken, accessTokenSecret, commentText, title, url, imageUrl, visibility, postToTwitter);
<!-- END_INCLUDE(linkedin:postShare) -->

<!-- BEGIN_INCLUDE(linkedin:reShare) -->
String accessToken = ...
String accessTokenSecret = ...
String shareId = ...
String commentText = ...
VisibilityType visibility = ...
LinkedInConnector linkedin = new LinkedInConnector();
Object response = linkedin.reShare(accessToken, accessTokenSecret, shareId, commentText, visibility);
<!-- END_INCLUDE(linkedin:reShare) -->